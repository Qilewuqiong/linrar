int init_msr();
int finalize_msr();

	The msr kernel module exposes msr via the /dev 
	filesystem.  These functions open and close 
	those files.


int write_msr(int socket, off_t msr, uint64_t val);
int write_msr_all_cores(int socket, off_t msr, uint64_t val);
int write_msr_all_cores_v(int socket, off_t msr, uint64_t *val);
int write_msr_single_core(int socket, int core, off_t msr, uint64_t val);

int read_msr(int socket, off_t msr, uint64_t *val);
int read_msr_all_cores_v(int socket, off_t msr, uint64_t *val);
int read_msr_single_core(int socket, int core, off_t msr, uint64_t *val);

	MSRs may be associated with a socket (aka package),
	core or thread.  Thread-level MSRs are not yet 
	supported.  Use read_msr and write_msr for socket-
	level MSRs and read_msr_single_core and write_msr_
	single_core for specific core-level MSRs.  The _v 
	variants expect a pointer to an array of length
	NUM_CORES_PER_SOCKET.  write_msr_all_cores handles
	the special case of writing the same value to all
	core-level MSRs on the socket.
	
int rapl_init(struct rapl_data ** rapl, uint64_t * rapl_flags);
int rapl_finalize();

    You must encase all non init/finalize rapl functions between 
    these two rapl functions. Since users will not always use
    rapl, this ensures rapl data is allocated dynamically. The
    init function must be used because it will detect the hardware
    that it is running on to discover the available MSR's. In
    the future these functions will restore rapl registers to
    their state prior to execution. You must remember to use
    rapl_finalize to avoid any memory leaks. 

struct rapl_data{
	uint64_t old_pkg_bits;
	uint64_t pkg_bits;

	uint64_t old_dram_bits;
	uint64_t dram_bits;

    uint64_t pp0_bits;
    uint64_t old_pp0_bits;

    uint64_t pp1_bits;
    uint64_t old_pp1_bits;

	double pkg_joules;
	double old_pkg_joules;
    double pkg_delta_joules;
	double pkg_watts;

	double dram_joules;
	double old_dram_joules;
    double dram_delta_joules;
	double dram_watts;

    double pp0_joules;
    double old_pp0_joules;
    double pp0_delta_joules;
    double pp0_watts;

    double pp1_joules;
    double old_pp1_joules;
    double pp1_delta_joules;
    double pp1_watts;

    uint64_t pkg_perf_count;

    uint64_t dram_perf_count;

    uint64_t pp0_perf_count;

    uint64_t pp0_policy;

    uint64_t pp1_policy;

	double elapsed;
}
int poll_rapl_data(const unsigned socket, struct rapl_data * result);
int read_rapl_data(const unsigned socket);
int dump_rapl_data( struct rapl_data *r, FILE * writeFile );

    To see how much power the various domains are using,
    or how much the power limit is influencing performance,
    you can use poll_rapl_data. If the result pointer is
    NULL when passed in, the data is simply updated. Otherwise
    result points to the rapl data of the supplied socket.
    To view a rapl_data item, pass the result to the dump_rapl_data
    function. Not all rapl data items may display, rapl detects
    the capabilities of the hardware and only prints out
    relevant information. Joules fields show instantaneous
    energy useage of a domain. Delta joules have the change in
    energy used between the two most recent polls of the data.
    Watts represents the delta joules over the amount of time
    between the two most recent polls. The perf count items 
    represent the amount of time that a domain was throttled 
    due to the imposed limits. The policy items represent a 
    priority for a given power plane limit, 0-31, where higher 
    is better. 

struct rapl_limit{
	double 		watts;		// User-friendly interface.
	double	 	seconds;
	uint64_t 	bits;		// User-unfriendly interface.
};
int set_pkg_rapl_limit(const unsigned socket, struct rapl_limit * limit1, struct rapl_limit * limit2);
int set_dram_rapl_limit(const unsigned socket, struct rapl_limit * limit);
int set_pp_rapl_limit(const unsigned socket, struct rapl_limit * limit0, struct rapl_limit * limit1);
int set_pp_rapl_policies(const unsigned socket, uint64_t * pp0, uint64_t * pp1);
int get_pp_rapl_policies(const unsigned socket, uint64_t * pp0, uint64_t * pp1);
int get_pkg_rapl_limit(const unsigned socket, struct rapl_limit * limit1, struct rapl_limit * limit2);
int get_dram_rapl_limit(const unsigned socket, struct rapl_limit * limit);
int get_pp_rapl_limit(const unsigend socket, struct rapl_limit limit0, struct rapl_limit * limt1);
int rapl_get_limit( int socket, struct rapl_limit* limit1, struct rapl_limit* limit2, struct rapl_limit* dram );
int dump_rapl_limit( struct rapl_limit *L );

    For rapl enabled processors, Each socket supports two 
    pkg power limits (using two separate time windows). 
    It may also support a DRAM power limit, a power plane
    0 power limit, and a power plane 1 power limit, each
	with its own window. Calling a get_XXX_rapl_limit() with 
	one or more non-null parameter will read the relevant
	MSR and translate the limits into watts and seconds.
	set_XXX_rapl_limit() will either write the specified
	bits fields directly to the MSR or, if that field
	is zero, translate the watts and seconds fields 
	into the appropriate bit pattern and write that to
	the MSR.  dump_rapl_limit prints out the fields
	of the provided struct.

